{"version":3,"sources":["components/Header.js","components/Buttonn.js","components/Test.js","App.js","serviceWorker.js","index.js"],"names":["Header","useState","index","setIndex","useEffect","interval","setInterval","clearInterval","className","Buttonn","props","state","ran","parseInt","this","endpoint","length","Math","random","setState","Fragment","href","text","React","Component","Test","data","setData","a","axios","result","console","log","name","type","lst","map","n","k","key","fetchData","style","margin","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qSAmBeA,G,MAhBA,WACb,IADmB,EAEOC,mBAAS,GAFhB,mBAEZC,EAFY,KAELC,EAFK,KASnB,OANAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BH,GAAS,SAACD,GAAD,OAAYA,EAAQ,GAAK,OACjC,KACH,OAAO,kBAAMK,cAAcF,MAC1B,IAED,yBAAKG,UAAU,oBACb,wBAAIA,UAAU,eAVL,CAAC,aAAc,cAAe,YAULN,O,yECQzBO,G,wDAnBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAET,MAAO,SAFL,E,gEAKjB,IAAMU,EAAMC,SAASC,KAAKJ,MAAMK,SAASC,OAASC,KAAKC,UACvDJ,KAAKK,SAAS,CAAEjB,MAAOY,KAAKJ,MAAMK,SAASH,O,+BAG3C,OACE,kBAAC,IAAMQ,SAAP,KACE,uBAAGZ,UAAU,aAAaa,KAAI,mBAAcP,KAAKH,MAAMT,QACpDY,KAAKJ,MAAMY,W,GAbAC,IAAMC,YC6BbC,G,MA1BF,WAAO,IAAD,EACOxB,mBAAS,MADhB,mBACVyB,EADU,KACJC,EADI,KAejB,OAbAvB,qBAAU,YACO,uCAAG,oCAAAwB,EAAA,sEACKC,IACnB,oBAFc,OACVC,EADU,OAIhBC,QAAQC,IAAIF,EAAOJ,MAJH,EAKOI,EAAOJ,KAAtBO,EALQ,EAKRA,KAAMC,EALE,EAKFA,KACRC,EAAMD,EAAKE,KAAI,SAACC,EAAGC,GAAJ,OAAU,kBAAC,EAAD,CAAShB,KAAMe,EAAGtB,SAAUkB,EAAKI,GAAIE,IAAKD,OACzEX,EAAQQ,GAPQ,2CAAH,qDASfK,KACC,IAGD,yBAAKC,MAAO,CAAEC,OAAQ,MACnBhB,GACC,yBAAKlB,UAAU,SACb,yBAAKA,UAAU,QAAQkB,OCRlBiB,G,MATH,WACV,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.4e8f1d8e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n  const text = ['hello isag', 'hacking now', 'fuck you'];\r\n  const [index, setIndex] = useState(0);\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setIndex((index) => (index + 1) % 3);\r\n    }, 2000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  return (\r\n    <div className='header .parallax'>\r\n      <h1 className='header-text'>{text[index]}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Buttonn.css';\r\nclass Buttonn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { index: 'hello' };\r\n  }\r\n  componentDidMount() {\r\n    const ran = parseInt(this.props.endpoint.length * Math.random());\r\n    this.setState({ index: this.props.endpoint[ran] });\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <a className='ISAGButton' href={`problems/${this.state.index}`}>\r\n          {this.props.text}\r\n        </a>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttonn;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Buttonn from './Buttonn';\r\nimport './Test.css';\r\n\r\nconst Test = () => {\r\n  const [data, setData] = useState(null);\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(\r\n        '/api/getProblems'\r\n      );\r\n      console.log(result.data);\r\n      const { name, type } = result.data;\r\n      const lst = type.map((n, k) => <Buttonn text={n} endpoint={name[n]} key={k} />);\r\n      setData(lst);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ margin: '0' }}>\r\n      {data && (\r\n        <div className='wrapp'>\r\n          <div className='test'>{data}</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Test;\r\n","import React from 'react';\r\nimport Header from './components/Header';\r\nimport Test from './components/Test';\r\nimport './App.css';\r\n// import Section from './components/Section';\r\n// import Footer from './components/Footer';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className='App'>\r\n      <Header />\r\n      <Test />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}